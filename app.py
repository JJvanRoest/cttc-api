import logging

from quart import Quart, jsonify
from quart_cors import cors
from quart_schema import QuartSchema, validate_request, validate_response
from quart_schema.validation import RequestSchemaValidationError
from src.api import api_endpoints

from src.database.database import database

ALLOWED_ORIGINS = ["http://127.0.0.1:5000"]
SESSION_REFRESH_EACH_REQUEST = True
LOG_LEVEL = "INFO"

app = Quart(__name__)

app.config['SESSION_COOKIE_SECURE'] = True
app.config['SESSION_REFRESH_EACH_REQUEST'] = SESSION_REFRESH_EACH_REQUEST
app.url_map.strict_slashes = False
logging.basicConfig(level=logging.getLevelName(LOG_LEVEL))

app = cors(app, expose_headers="Authorization", allow_credentials=True,
           allow_origin=ALLOWED_ORIGINS)
QuartSchema(app)


@app.route('/')
async def handle():
    return jsonify({'hello': 'world'}), 200

app.register_blueprint(api_endpoints, url_prefix='/api')


# noinspection PyUnusedLocal
@app.errorhandler(RequestSchemaValidationError)
async def handle_validation_error(error):
    return {"errors": error.validation_error.json()}, 400


# noinspection PyUnusedLocal
@app.errorhandler(400)
async def bad_request(error):
    return jsonify({"success": False, "message": "Bad request sent."}), 400


# noinspection PyUnusedLocal
@app.errorhandler(401)
async def unauthorised(error):
    return jsonify({"success": False, "message": "You are unauthorised for access to this path."}), 401


# noinspection PyUnusedLocal
@app.errorhandler(403)
async def page_forbidden(error):
    return jsonify({"success": False, "message": "You are forbidden from access to this path."}), 403


# noinspection PyUnusedLocal
@app.errorhandler(404)
async def page_not_found(error):
    return jsonify({"success": False, "message": "Not found."}), 404


# noinspection PyUnusedLocal
@app.errorhandler(405)
async def not_allowed_request_method(error):
    return jsonify({"success": False, "message": "Request method not allowed."}), 405


# noinspection PyUnusedLocal
@app.errorhandler(500)
async def internal_server_error(error):
    return jsonify({"success": False, "message": "Something went wrong, we have been notified."}), 500


# noinspection PyUnusedLocal
@app.errorhandler(503)
async def service_unavailable(error):
    return jsonify({"success": False, "message": "Service is unavailable at the moment, try again later."}), 503


# This hook ensures that a connection is opened to handle any queries
# generated by the request.
@app.before_request
def _db_connect():
    if database.is_closed():
        database.connect()


# This hook ensures that the connection is closed when we've finished
# processing the request.
# noinspection PyUnusedLocal
@app.teardown_request
def _db_close(exc):
    logging.info(database)
    if not database.is_closed():
        database.close()


if __name__ == "__main__":
    app.run(debug=True)
